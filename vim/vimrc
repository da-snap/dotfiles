execute pathogen#infect()

syntax on
set expandtab
set autoindent

" Write Ctags every time when saving files:
"au BufWritePost *.pm,*.js,*.vue silent! !ctags -R &

" no automatic linebreak when textwidth is reached
setlocal formatoptions-=t
setlocal formatoptions+=l
setlocal textwidth=80
setlocal colorcolumn=+1
highlight ColorColumn ctermbg=lightgrey guibg=lightgrey

set t_Co=16
scriptencoding utf-8
set encoding=utf-8

" set viminfo
set viminfo='10,"\100,:20,%,n~/.viminfo

if has("autocmd")
      au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

filetype indent plugin on

" setlocal foldmethod=indent
"autocmd FileType perl setlocal foldmethod=indent
" never expand tabs in Makefiles - bugs them out
autocmd FileType make setlocal noexpandtab
" expand tabs in perl and config files
autocmd FileType perl setlocal expandtab shiftwidth=4
autocmd FileType conf setlocal expandtab
autocmd FileType apache setlocal expandtab
" python settings
autocmd FileType python setlocal tabstop=4 expandtab shiftwidth=4 softtabstop=4
autocmd FileType vue setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd FileType gitcommit setlocal spell spelllang=en_us

" perl smartsearch: if lowercase, ignore case
set ignorecase
set smartcase
set incsearch

"better file completion while opening files from vim
set wildmode=list:longest

set guioptions-=m  "remove menu bar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove toolbar

set rnu

" settings to use buffers
set hidden

" To open a new empty buffer
 " This replaces :tabnew which I used to bind to this mapping
 nmap <leader>T :enew<cr>

 " Move to the next buffer
 nmap <leader>l :bnext<CR>

 " Move to the previous buffer
 nmap <leader>h :bprevious<CR>

 " Close the current buffer and move to the previous one
 " This replicates the idea of closing a tab
 nmap <leader>bq :bp <BAR> bd #<CR>

 " Show all open buffers and their status
 nmap <leader>bl :ls<CR>

" CtrlSpace Settings
set nocompatible
set showtabline=0
let g:CtrlSpaceStatuslineFunction = "airline#extensions#ctrlspace#statusline()"
" install silversearcher-ag
if executable("ag")
    let g:CtrlSpaceGlobCommand = 'ag -l --nocolor -g ""'
endif

nmap <leader>o :set paste!<cr>

" Format a JSON
nmap =j :%!python -m json.tool<cr>
" Persistent undo
if !isdirectory($HOME."/.vim")
    call mkdir($HOME."/.vim", "", 0770)
endif
if !isdirectory($HOME."/.vim/undo-dir")
    call mkdir($HOME."/.vim/undo-dir", "", 0700)
endif
set undodir=$HOME/.vim/undo-dir
set undofile

set undolevels=200
set undoreload=1000

" Store swp/backup file in one place
if !isdirectory($HOME."/.vim/backup")
    call mkdir($HOME."/.vim/backup", "", 0770)
endif
set backupdir=$HOME/.vim/backup//
if !isdirectory($HOME."/.vim/swap")
    call mkdir($HOME."/.vim/swap", "", 0700)
endif
set directory=$HOME/.vim/swap//

set hlsearch cursorline
"syntax enable
set background=dark
colorscheme onedark

let g:vue_disable_pre_processors=1
" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! w !sudo tee > /dev/null %

let @m = "bi{{maketext('lt<a')}}"

let g:airline#extensions#ctrlspace#enabled = 1
nnoremap <silent><C-p> :CtrlSpace O<CR>

"" Add custom detection for ansible files:
au BufRead,BufNewFile */playbooks/*.yml set filetype=ansible
au BufRead,BufNewFile */config/*.yml set filetype=ansible
au BufRead,BufNewFile */vars/*.yml set filetype=ansible

set list lcs=tab:Â»Â·

"" ALE (Linting) Configuration:
let g:airline#extensions#ale#enabled = 1
let g:ale_perl_perlcritic_showrules = 1
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)
let g:ale_fixers = { 'javascript': ['eslint'] }
let g:ale_linters = {
\    'javascript': ['eslint'],
\}
let g:ale_fix_on_save = 1
let g:ale_sign_warning = 'â–²'
let g:ale_sign_error = 'âœ—'
highlight link ALEWarningSign String
highlight link ALEErrorSign Title

"" Use ag for searching
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

"onedark colorscheme
"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (empty($TMUX))
  if (has("nvim"))
    "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif
